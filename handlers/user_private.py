import calendar
import datetime
import locale
import os

from aiogram import Router, types, F, Bot
from aiogram.filters import CommandStart, StateFilter, or_f, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv, find_dotenv
from sqlalchemy.ext.asyncio import async_session

from ORM.ORM_Query import orm_get_customers_id, orm_add_customer, orm_update_customer, orm_get_products, \
    orm_get_product, orm_get_masters, orm_add_customer_phone, orm_get_customer_phone, orm_get_customer
from filters.chat_type import ChatTypeFilter
from keyboards.inline import inline_kb_builder, inline_calendar_builder
from keyboards.reply import start_kb, send_phone_kb

load_dotenv(find_dotenv())

supergroup_id = os.getenv("supergroup_id")

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(["private"]))


cal = calendar.TextCalendar()


@user_private_router.message(CommandStart())
async def start(message:types.Message,session:async_session):
    if message.from_user.id not in await orm_get_customers_id(session):
        data = {
            "first_name": message.from_user.first_name,
            "user_id": message.from_user.id,
        }
        await orm_add_customer(session, data)

    await message.answer("–ü—Ä–∏–≤–µ—Ç!üëã\n–ú–µ–Ω—è –∑–æ–≤—É—Ç KateEyesBot."
                         " –Ø –ø–æ–º–æ–≥–∞—é —É–∑–Ω–∞—Ç—å –∫—Ç–æ –º—ã —Ç–∞–∫–∏–µ, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏,"
                         " –∞ –µ—â–µ —è –æ—Ç–≤–µ—á–≤—é –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                         "–¢–∞–∫ –∂–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è\n"
                         "–ù–∞—á–Ω–µ–º ?)...üöÄ",
                         reply_markup=start_kb)


@user_private_router.message(or_f((Command("about")),(F.text.lower() == "–æ –Ω–∞—Å")))
async def about_us(message:types.Message):
    await message.answer("–ú—ã —Å–µ—Ç—å —Å–∞–ª–æ–Ω–æ–≤ KateEyes, –∏ –º—ã –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –º–∏—Ä –∫—Ä–∞—Å–∏–≤–µ–µ –∏ –ª—É—á—à–µ.\n"
                         "–ú—ã –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ–º—Å—è —Ç–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –∫—Ä–∞—Å–æ—Ç–∞ —Å–ø–∞—Å–µ—Ç –º–∏—Ä –∏ –∏–º–µ–Ω–Ω–æ –≤ –æ—â—É—â–µ–Ω–∏–∏ "
                         "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–≤—è–∑—ã–≤–∞—é—â–µ–µ –≤—Å–µ—Ö –ª—é–¥–µ–π –∑–≤–µ–Ω–æ‚ù§Ô∏è‚Äçüî•\n"
                         "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–ª–æ–¥—ã—Ö, –∫—Ä–∞—Å–∏–≤—ã—Ö –∏ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ üë©‚Äçüéì"
                         "–ø–æ–º–æ–≥–∞–µ—Ç –ª—é–¥—è–º –ø—Ä–∏–æ–±—â–∏—Ç—å—Å—è –∫ —ç—Ç–æ–º—É –ø—Ä–∏–Ω—Ü–∏–ø—É –∏ –æ—â—É—Ç–∏—Ç—å –µ–≥–æ –Ω–∞ —Å–µ–±–µ\n"
                         "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –Ω–∞ –ø—Ä–∏–µ–º –∏ –≥–ª–∞–≤–Ω–æ–µ - –Ω–µ –±–æ–π—Ç–µ—Å—å –±—ã—Ç—å —Å–æ–±–æ–π! üíã")

@user_private_router.message(or_f((Command("products")),(F.text.lower() == "–Ω–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã")))
async def our_products(message:types.Message,session:async_session):
        for product in await orm_get_products(session):
            await message.answer(f"{product.name}\n{product.description}\nPrice:{round(product.price,2)}$")


@user_private_router.message(or_f((Command("FAQ")),(F.text.lower() == "faq")))
async def our_products(message:types.Message):
        await message.answer("–Ø –µ—â–µ —Ç–æ–ª—å–∫–æ —É—á—É—Å—å –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –º–Ω–µ –µ—â–µ –Ω–µ –∑–∞–¥–∞–≤–ª–∏)\n"
                             "–û–±–µ—â–∞—é –≤ –±—É–¥—É—â–µ–º —Å—Ç–∞—Ç—å —É–º–Ω–µ–µ –∏ –±–æ–ª—å—à–µ –≤–∞–º –ø–æ–º–æ–≥–∞—Ç—åü•∫")


##########FSM Make order##########


class MakeOrder(StatesGroup):
    phone = State()
    add_phone = State()
    products = State()
    day = State()
    all_right = State()


############### –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è ##########################
############### –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ —Å –Ω–µ–¥–µ–ª—è–º–∏ ####################
def get_calendar(year:int, month:int):
    locale.setlocale(locale.LC_TIME, 'ru')

    calendar_obj = cal.monthdayscalendar(year,month)

    month_name_obj = datetime.datetime.strptime(str(month), "%m")
    month_name = month_name_obj.strftime("%B")

    days_list = []

    days_list.append(["<-", f"beforemonth_{year}_{month}"])
    days_list.append([month_name," "])
    days_list.append(["->",f"nextmonth_{year}_{month}"])


    days_list.append(["–ü–Ω"," "])
    days_list.append(["–í—Ç"," "])
    days_list.append(["–°—Ä"," "])
    days_list.append(["–ß—Ç"," "])
    days_list.append(["–ü—Ç"," "])
    days_list.append(["–°–±"," "])
    days_list.append(["–í—Å"," "])


    for week in calendar_obj:
        week[:] = [day if day!=0 else " " for day in week]

    for week in calendar_obj:
        for day in week:
            if day != " ":
                days_list.append([str(day),f"day_{month}_{day}"])
            else:
                days_list.append([str(day), f"falseday_"])

    days_list.append(["–ù–∞–∑–∞–¥", f"beforestep_{MakeOrder.products}"])

    return days_list




@user_private_router.callback_query(F.data.startswith("nextmonth_"))
async def get_next(callback:types.CallbackQuery):

    date_list = callback.data.split("_")[1:]


    if int(date_list[1]) == 12:
        year = int(date_list[0])+1
        month = 1
    else:
        year = int(date_list[0])
        month = int(date_list[1])+1

    btns = get_calendar(year,month)

    await callback.message.edit_reply_markup(
                                  reply_markup=inline_calendar_builder(
                                      data = btns,
                                  )
                                  )



@user_private_router.callback_query(F.data.startswith("beforemonth_"))
async def get_before(callback:types.CallbackQuery):

    date_list = callback.data.split("_")[1:]


    if int(date_list[1]) == 1:
        year = int(date_list[0])-1
        month = 12
    else:
        year = int(date_list[0])
        month = int(date_list[1])-1

    btns = get_calendar(year,month)

    await callback.message.edit_reply_markup(
                                  reply_markup=inline_calendar_builder(
                                      data = btns,
                                  )
                                  )

##############  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ —Å—Ç–∞—Ä–Ω–∏—Ü—É –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ (–∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥) ################
@user_private_router.callback_query(StateFilter("*"), F.data.startswith("beforestep_"))
async def come_back(callbak: types.CallbackQuery, state: FSMContext,session:async_session):
    btns = {}
    for product in await orm_get_products(session):
        btns[product.name] = f"product_{product.id}"
    btns["–í—ã–π—Ç–∏"] = f"out_"
    await callbak.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:")
    await callbak.message.edit_reply_markup(
                         reply_markup=inline_kb_builder(
                             btns=btns
                         ))
    await state.set_state(MakeOrder.products)


#####################  –ö–Ω–æ–ø–∫–∞ –≤—ã–π—Ç–∏ (–æ–±–Ω—É–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ) ########################
@user_private_router.callback_query(MakeOrder.products, F.data.startswith("out_"))
async def out(callback:types.CallbackQuery,session:async_session,state:FSMContext):
    await callback.message.delete()
    await callback.message.answer("–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å)\n",reply_markup=start_kb)

    await state.clear()



###########start###########



@user_private_router.message(StateFilter(None), F.text.lower() == "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def review_phone (message:types.Message,session:async_session,state:FSMContext):
    ###############–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–µ —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ#################
    ###############–¢.–∫ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–ª–µ—Ç—è—Ç –ë–î,#################\
    ###############—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞—á–∞—Ç—ã–π –¥–∏–∞–ª–æ–≥#################
    ###############–∞ –≤ –±–∞–∑–µ –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç#################
    if message.from_user.id not in await orm_get_customers_id(session):
        data = {
            "first_name": message.from_user.first_name,
            "user_id": message.from_user.id,
        }
        await orm_add_customer(session, data)
    #################### –ü—Ä–æ–≤–µ—Ä—è–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ #################################
    customer_phone = await orm_get_customer_phone(session, message.from_user.id)

    if customer_phone != [None] and customer_phone != []:
        btns = {}
        for product in await orm_get_products(session):
            btns[product.name] = f"product_{product.id}"
        btns["–í—ã–π—Ç–∏"] = f"out_"
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                             reply_markup=inline_kb_builder(
                                 btns=btns
                             ))
        await state.set_state(MakeOrder.products)
    else :
        await message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º, "
                             "—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏",reply_markup=send_phone_kb)
        await state.set_state(MakeOrder.add_phone)



@user_private_router.callback_query(StateFilter("*"), F.data.startswith("want_"))
async def want_review_phone(callback:types.CallbackQuery,session:async_session,state:FSMContext):

    ###############–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–µ —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ#################
    ###############–¢.–∫ –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–ª–µ—Ç—è—Ç –ë–î,#################\
    ###############—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞—á–∞—Ç—ã–π –¥–∏–∞–ª–æ–≥#################
    ###############–∞ –≤ –±–∞–∑–µ –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç#################
    if callback.from_user.id not in await orm_get_customers_id(session):
        data = {
            "first_name": callback.from_user.first_name,
            "user_id": callback.from_user.id,
        }
        await orm_add_customer(session, data)
    #################### –ü—Ä–æ–≤–µ—Ä—è–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ #################################
    customer_phone = await orm_get_customer_phone(session, callback.from_user.id)

    if customer_phone != [None] and customer_phone != []:
        btns = {}
        for product in await orm_get_products(session):
            btns[product.name] = f"product_{product.id}"
        btns["–í—ã–π—Ç–∏"] = f"out_"
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                             reply_markup=inline_kb_builder(
                                 btns=btns
                             ))
        await state.set_state(MakeOrder.products)
    else :
        await callback.message.answer("–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º, "
                             "—á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏",reply_markup=send_phone_kb)
        await state.set_state(MakeOrder.add_phone)



@user_private_router.message(MakeOrder.add_phone, F.text.lower()=="–Ω–µ—Ç")
async def dont_add_phone (message:types.Message, state:FSMContext):

    await message.answer("–ù–∞–º –∂–∞–ª—å, —á—Ç–æ –≤–∞–º —á–µ–º –ª–∏–±–æ –Ω–µ –ø–æ–¥–æ—à–µ–ª –Ω–∞—à —Å–µ—Ä–≤–∏—Å üò¢\n–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º —Å–Ω–æ–≤–∞",
                         reply_markup=start_kb)
    await state.clear()



@user_private_router.message(MakeOrder.add_phone, F.contact)
async def add_phone (message:types.Message,session:async_session,state:FSMContext):

    number = {
        "phone_number": message.contact.phone_number
    }
    await orm_add_customer_phone(session,number,message.from_user.id)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ!\n–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ó–∞–ø–∏—Å–∞—Ç—å—Å—è ‚¨áÔ∏è",reply_markup=start_kb)

    await state.set_state(MakeOrder.phone)


@user_private_router.message(MakeOrder.phone,F.text.lower() == "–∑–∞–ø–∏—Å–∞—Ç—å—Å—è")
async def choise_product(message: types.Message, state: FSMContext, session:async_session):

    btns = {}
    for product in await orm_get_products(session):
        btns[product.name] = f"product_{product.id}"
    btns["–í—ã–π—Ç–∏"] = f"out_"
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                         reply_markup=inline_kb_builder(
                         btns=btns
                         ))
    await state.set_state(MakeOrder.products)



@user_private_router.callback_query(MakeOrder.products, F.data.startswith("product_"))
async def review_choise_product(callbak:types.CallbackQuery,state:FSMContext,session:async_session):

    product_id = int(callbak.data.split('_')[-1])

    product_obj = await orm_get_product(session,product_id)
    product_name = product_obj.name
    product_description = product_obj.description

    await callbak.message.edit_text(f"{product_name}\n{product_description}",
                                 reply_markup=inline_kb_builder(
                                     btns={
                                         "–í—ã–±—Ä–∞—Ç—å":f"choiseproduct_{product_name}",
                                         "–ù–∞–∑–∞–¥" : f"beforestep_"
                                     }
                                 ))
    await state.set_state(MakeOrder.day)



@user_private_router.callback_query(MakeOrder.day, F.data.startswith("choiseproduct_"))
async def choise_day(callback:types.CallbackQuery, state: FSMContext, session: async_session):

    await state.update_data(product_to_order = callback.data.split("_")[-1])

    date = str(datetime.datetime.now())

    date = date.split("-")

    days_list = get_calendar(int(date[0]), int(date[1]))

    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç—Ä–æ–≤–æ–≤—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø–∏—Å–∏")
    await callback.message.edit_reply_markup(reply_markup=inline_calendar_builder(

    data = days_list
    ))
    await state.set_state(MakeOrder.day)




@user_private_router.callback_query(MakeOrder.day, F.data.startswith("day_"))
async def all_right(callback:types.CallbackQuery,session:async_session,state:FSMContext):

    await state.update_data(day_to_order=callback.data.split("_")[2])
    await state.update_data(month_to_order=callback.data.split("_")[1])

    data = await state.get_data()

    product_name= data["product_to_order"]

    month_name_obj = datetime.datetime.strptime(data["month_to_order"], "%m")
    month_name = month_name_obj.strftime("%B")

    await callback.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ!\n–ò—Ç–∞–∫, –≤–∞—à–∞ –∑–∞–ø–∏—Å—å:\n"
                                     f"{product_name},  {month_name} {data['day_to_order']}",)
    await callback.message.edit_reply_markup(
                                  reply_markup=inline_kb_builder(
                                      btns={
                                          "–í–µ—Ä–Ω–æ":f"right_",
                                          "–ù–µ—Ç":f"notright_"
                                      }
                                  ))


    await state.set_state(MakeOrder.phone)

@user_private_router.callback_query(MakeOrder.phone, F.data.startswith("right_"))
async def finale_right(callback:types.CallbackQuery,session:async_session,state:FSMContext,bot:Bot):

    data = await state.get_data()

    await orm_update_customer(session,data,callback.from_user.id)

    product_name= data["product_to_order"]

    month_name_obj = datetime.datetime.strptime(data["month_to_order"], "%m")
    month_name = month_name_obj.strftime("%B")

    day = data['day_to_order']

    phone_obj = await orm_get_customer_phone(session,callback.from_user.id)
    phone_str = "".join([i if i not in ["[, ], ', "] else "" for i in phone_obj])
    phone = "+" + phone_str[0] + "-" + phone_str[1:]

    await bot.send_message(text=f"–ò–º—è : {callback.from_user.first_name}\nUsername : {callback.from_user.username}\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone}\n\n"
                                f"–£—Å–ª—É–≥–∞ : {product_name}\n–î–∞—Ç–∞ : {month_name} {day}\n",
                                chat_id=supergroup_id)

    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ!\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π")
    await state.clear()


@user_private_router.callback_query(MakeOrder.phone, F.data.startswith("notright_"))
async def finale_notright(callback:types.CallbackQuery,session:async_session,state:FSMContext):

    await callback.message.answer("–ß—Ç–æ–∂, –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞")

    btns = {}
    for product in await orm_get_products(session):
        btns[product.name] = f"product_{product.id}"
    btns["–í—ã–π—Ç–∏"] = f"out_"
    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
                         reply_markup=inline_kb_builder(
                             btns=btns
                         ))
    await state.set_state(MakeOrder.products)